# Class basics

class Car(object):
    condition = "new"
    pass
    
# Create an instance of a class

class Car(object):
    pass
my_car =Car()


# Class member variables

class Car(object):
    def __init__(self, my_car):
        my_car = Car()
    condition = "new"



# Calling class member variables

class Car(object):
    def __init__(self, my_car):
        my_car = Car()
    condition = "new"



# Initializing a class

class Car(object):
    condition='new'
def __init__(self,model,color,mpg):
    self.model=model
    self.color=color
    self.mpg=mpg


# Referring to member variables

class Car(object):
    condition = "new"    
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg = mpg

my_car = Car("DeLorean","silver", 88)

print my_car.model
print my_car.color
print my_car.mpg



# Creating class methods  

class Car(object):
  condition = "new"
  def __init__(self, model, color, mpg):
    self.model = model
    self.color = color
    self.mpg   = mpg

my_car = Car("DeLorean", "silver", 88)

print my_car.model
print my_car.color
print my_car.mpg


# Modifying member variables

class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg

    def display_car(self):
        print "This is a %s %s with %s MPG."%(self.color, self.model, str(self.mpg))

    def drive_car(self):
        self.condition = "used"
        return self.condition
my_car = Car("DeLorean", "silver", 88)

print (my_car.condition)
print my_car.drive_car()



# Inheritance

class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg = mpg

    def display_car(self):
        return "This is a %s %s with %s MPG. " % (self.color, self.model, self.mpg)

    def drive_car(self):
        self.condition = "used"

class ElectricCar(Car):
    def __init__(self, model, color, mpg, battery_type):
        super(ElectricCar, self).__init__(model, color, mpg)
        self.battery_type = battery_type

    def display_car(self):
       inherit_Str = super(ElectricCar, self).display_car()
       return inherit_Str + "It has a %s battery. " % (self.battery_type)

my_car = ElectricCar("Ford", "black", 95,"molten salt")
print my_car.display_car()



# Overriding methods

class Car(object):
    condition = "new"
    def __init__(self, model, color, mpg):
        self.model = model
        self.color = color
        self.mpg   = mpg
        
    def display_car(self):
        print "This is a %s %s with %s MPG." % (self.color, self.model, self.mpg)
        
    def drive_car(self):
        self.condition = "used"
 
class ElectricCar(Car):
    def __init__(self, model, color, mpg, battery_type):
        self.model = model
        self.color = color
        self.mpg = mpg
        self.battery_type = battery_type
    
    def drive_car(self):
        self.condition = "like new"
 
my_car = ElectricCar("Prius", "white", 88, "molten salt")
 
print my_car.condition
my_car.drive_car()
print my_car.condition



# Building useful classes

class Point3D(object):
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __repr__(self):
        return "(" + str(self.x) + ", " + str(self.y) + ", " + str(self.z) + ")" 

my_point = Point3D(1, 2, 3)
print my_point










































































































